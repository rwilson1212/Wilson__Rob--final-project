// src/send-form/send-form.jsx
import { h as _jsx } from "atomico";
import { c, useEffect, useHost, useState } from "atomico";
import { usePromise } from "@atomico/hooks/use-promise";
function sendForm({ action, method, mode, cache, credentials, json, headers }) {
  const host = useHost();
  const [submit, setSubmit] = useState();
  const [response, status] = usePromise(async () => {
    const formData = new FormData(host.current.querySelector("form"));
    const body = json ? JSON.stringify([...formData].reduce((body2, [name, value]) => ({
      ...body2,
      [name]: value
    }), {})) : formData;
    const response2 = await fetch(action, {
      method,
      mode,
      cache,
      credentials,
      headers: json ? { ...headers, "Content-Type": "application/json" } : headers,
      body
    });
    return response2.json();
  }, submit, [action, method, mode, cache, credentials]);
  useEffect(() => {
    if (status == "fulfilled" || status == "rejected")
      setSubmit(false);
  }, [status]);
  return /* @__PURE__ */ _jsx("host", {
    shadowDom: true,
    status,
    response,
    onsubmit: (ev) => {
      ev.preventDefault();
      ev.stopPropagation();
      setSubmit(true);
    }
  }, /* @__PURE__ */ _jsx("slot", null), status == "pending" && /* @__PURE__ */ _jsx("slot", {
    name: "pending"
  }), status == "rejected" && /* @__PURE__ */ _jsx("slot", {
    name: "rejected"
  }), status == "fulfilled" && /* @__PURE__ */ _jsx("slot", {
    name: "fulfilled"
  }));
}
sendForm.props = {
  response: null,
  action: String,
  mode: String,
  cache: String,
  json: Boolean,
  headers: Object,
  method: { type: String, value: "post" },
  credentials: { type: String, value: "same-origin" },
  status: {
    type: String,
    reflect: true,
    event: { type: "FormFetchStatus", bubbles: true, composed: true }
  }
};
var SendForm = c(sendForm);
customElements.define("a-send-form", SendForm);
export {
  SendForm
};
