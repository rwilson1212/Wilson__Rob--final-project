// src/router/elements/router-case.jsx
import { h as _jsx } from "atomico";
import { c } from "atomico";
function routerCase() {
  return /* @__PURE__ */ _jsx("host", {
    shadowDom: true
  });
}
routerCase.props = {
  slot: { type: String, reflect: true, value: "router-case" },
  path: { type: String, reflect: true, path: "/" },
  for: { type: String, reflect: true },
  load: null
};
var RouterCase = c(routerCase);

// src/router/elements/router-switch.jsx
import { h as _jsx2 } from "atomico";
import { c as c2, useState, useEffect, useMemo, useProp } from "atomico";
import { useRouter, getPath } from "@atomico/hooks/use-router";
import { useRender } from "@atomico/hooks/use-render";
import { useChannel } from "@atomico/hooks/use-channel";
var CACHE = new Map();
function routerSwitch({ transition, path }) {
  const [router, setRouter] = useState();
  const [request, setRequest] = useProp("request");
  const [rootPath, setChannel] = useChannel("InheritPath");
  const localPath = (rootPath || "") + (path || "");
  const routerScope = useMemo(() => {
    const routerscope = {};
    for (const prop in router) {
      routerscope[localPath + prop] = router[prop];
    }
    return routerscope;
  }, [localPath, router]);
  const result = useRouter(routerScope);
  useEffect(() => {
    setChannel(localPath);
  }, [localPath]);
  useEffect(() => {
    if (!result)
      return;
    let [element, currentPath, params] = result;
    const { load, for: forId } = element;
    if (forId && !CACHE.has(forId)) {
      CACHE.set(forId, Promise.resolve({ forId }));
    }
    if (load && !CACHE.has(load)) {
      let promise2;
      if (typeof load == "string") {
        promise2 = import(new URL(load, location).href);
      } else {
        promise2 = Promise.resolve(load(params));
      }
      CACHE.set(load, promise2.then((value) => typeof value == "object" ? value : { default: value }));
    }
    let promise = CACHE.get(load || forId);
    setTimeout(() => promise && setRequest({
      loading: true
    }), 40);
    promise.then(async ({ default: view, forId: forId2, ...data }) => {
      if (currentPath != getPath()) {
        promise = null;
        return;
      }
      if (transition) {
        await transition(params);
      }
      promise = null;
      currentPath == getPath() && setRequest({
        view: typeof view == "function" ? view(params) : view,
        forId: forId2,
        data
      });
    });
    return () => promise = null;
  }, [result]);
  useRender(() => /* @__PURE__ */ _jsx2("section", {
    slot: "view",
    key: getPath()
  }, request.view), [request.view]);
  return /* @__PURE__ */ _jsx2("host", {
    shadowDom: true,
    data: request.data
  }, /* @__PURE__ */ _jsx2("slot", {
    name: "router-case",
    onslotchange: (ev) => setRouter([...ev.target.assignedElements()].reduce((router2, element) => ({
      ...router2,
      [element.path]: () => element
    }), {}))
  }), /* @__PURE__ */ _jsx2("slot", {
    name: request.forId || "view"
  }), request.loading && /* @__PURE__ */ _jsx2("slot", {
    name: "loading"
  }));
}
routerSwitch.props = {
  path: String,
  transition: Function,
  data: { type: Object, event: { type: "Data" } },
  request: { type: Object, event: { type: "Request" }, value: Object }
};
var RouterSwitch = c2(routerSwitch);

// src/router/elements/router-redirect.jsx
import { h as _jsx3 } from "atomico";
import { c as c3, useEffect as useEffect2 } from "atomico";
import { redirect } from "@atomico/hooks/use-router";
import { useChannel as useChannel2 } from "@atomico/hooks/use-channel";
function routerRedirect({ path }) {
  const [, setChannel] = useChannel2("InheritPath");
  useEffect2(() => setChannel(path), [path]);
  return /* @__PURE__ */ _jsx3("host", {
    onclick: (ev) => {
      let { target } = ev;
      do {
        if (target.hasAttribute && target.hasAttribute("href") && !target.hasAttribute("ignore")) {
          ev.preventDefault();
          const href = target.getAttribute("href");
          !/^(http(s){0,1}:){0,1}\/\//.test(href) && redirect((path || "") + href);
          break;
        }
      } while (target = target.parentNode);
    }
  });
}
routerRedirect.props = {
  path: String
};
var RouterRedirect = c3(routerRedirect);

// src/router/elements/router-link.jsx
import { h as _jsx4 } from "atomico";
import { c as c4 } from "atomico";
import { redirect as redirect2 } from "@atomico/hooks/use-router";
import { useChannel as useChannel3 } from "@atomico/hooks/use-channel";
function routerLink({ href }) {
  const [path] = useChannel3("InheritPath");
  const link = (path || "") + (href || "");
  return /* @__PURE__ */ _jsx4("host", {
    onclick: (event) => {
      event.stopPropagation();
      event.preventDefault();
      link && redirect2(link);
    }
  });
}
routerLink.props = {
  href: String
};
var RouterLink = c4(routerLink, HTMLAnchorElement);

// src/router/router.js
import { redirect as redirect3, getPath as getPath2 } from "@atomico/hooks/use-router";
customElements.define("a-router-redirect", RouterRedirect);
customElements.define("a-router-switch", RouterSwitch);
customElements.define("a-router-case", RouterCase);
customElements.define("a-router-link", RouterLink, { extends: "a" });
export {
  RouterCase,
  RouterLink,
  RouterRedirect,
  RouterSwitch,
  getPath2 as getPath,
  redirect3 as redirect
};
