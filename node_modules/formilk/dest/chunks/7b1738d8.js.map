{"version":3,"file":"7b1738d8.js","sources":["../../src/hooks/use-switch.js"],"sourcesContent":["import { h, useEffect, useRef, useProp } from \"atomico\";\r\nimport { useRender } from \"@atomico/hooks/use-render\";\r\nimport { useParent } from \"@atomico/hooks/use-parent\";\r\nimport { useEventLabel } from \"./use-event-label.js\";\r\n\r\n/**\r\n *\r\n * @param {string} type\r\n * @param {string} name\r\n * @param {string} value\r\n */\r\nexport function useSwitch(type, name, value) {\r\n  const refInput = useRef();\r\n  const refContainer = useRef();\r\n  const refForm = useParent(\"form\");\r\n  const [checked, setChecked] = useProp(\"checked\");\r\n\r\n  useRender(\r\n    () =>\r\n      h(\"input\", { type, name, value, ref: refInput, checked, slot: \"input\" }),\r\n    [type, name, value, checked]\r\n  );\r\n\r\n  const toggle = () => {\r\n    refInput.current.dispatchEvent(new MouseEvent(\"click\"));\r\n    setChecked(refInput.current.checked);\r\n  };\r\n\r\n  /**\r\n   * Try to establish a connection with a label tag\r\n   */\r\n\r\n  useEventLabel(toggle, () => {\r\n    refContainer.current.addEventListener(\"click\", toggle);\r\n    return () => refContainer.current.removeEventListener(\"click\", toggle);\r\n  });\r\n\r\n  /**\r\n   * listens the state changes associated with the radio input\r\n   * to reflect them to the webcomponent\r\n   */\r\n  useEffect(() => {\r\n    if (type != \"radio\" || !refForm.current) return;\r\n    const handler = () => setChecked(refForm.current[name].value == value);\r\n    refForm.current.addEventListener(\"change\", handler);\r\n    return () => refForm.current.removeEventListener(\"change\", handler);\r\n  }, [type, name, value]);\r\n\r\n  return [refInput, refContainer];\r\n}\r\n"],"names":[],"mappings":";;;;;AAKA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;"}