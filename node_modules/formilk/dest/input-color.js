import { jsx } from 'atomico/jsx-runtime';
import { c, useProp, useRef } from 'atomico';
import { useRender } from '@atomico/hooks/use-render';
import { u as useEventLabel } from './chunks/5ace6c85.js';

const style = /*css*/ `
  :host{
    display: inline-block;
  }
  ::slotted(input){
    width: 100%;
    height: 100%;
    padding: 0px;
    border: 0px;
    opacity: 0;
    position: absolute;
    top: 0px;
    left: 0px;
  }

  button{
    width: 2rem;
    height: 2rem;
    padding: 0px;
    background: var(--v);
    border: .1rem solid var(--input-color_border);
    display: inline-block;
    border-radius: var(--input-color_radius);
    position: relative;
  }
`;

function color({ disabled }) {
  const [value, setValue] = useProp("value");
  const refInput = useRef();
  useRender(
    () => (
      jsx('input', {
        ref: refInput,
        oninput: ({ target }) => setValue(target.value),
        type: "color",
        value: value,
        disabled: disabled,
        tabindex: "-1",}
      )
    ),
    [value]
  );
  useEventLabel(() => refInput.current.click());
  return (
    jsx('host', { shadowDom: true,}
      , jsx('style', null, style)
      , jsx('button', { style: `--v: ${value}`,}
        , jsx('slot', null)
      )
    )
  );
}

color.props = {
  value: {
    type: String,
    value: "#000",
  },
  disabled: { type: Boolean, reflect: true },
};

const InputColor = c(color);

export { InputColor };
//# sourceMappingURL=input-color.js.map