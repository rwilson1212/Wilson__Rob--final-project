{"version":3,"file":"input-basic.js","sources":["../src/input-basic.jsx"],"sourcesContent":["import { c, useProp, useRef } from \"atomico\";\r\nimport { useSlot } from \"@atomico/hooks/use-slot\";\r\nimport { useRender } from \"@atomico/hooks/use-render\";\r\nimport { useEventLabel } from \"./hooks/use-event-label.js\";\r\n\r\nexport const inputStyle = /*css*/ `\r\n    :host{\r\n        display: block;\r\n        background: var(--input_background);\r\n        box-shadow: var(--input_shadow);\r\n        border-radius: var(--input_radius);   \r\n    }\r\n    .label,\r\n    .icon{\r\n        box-sizing: border-box;\r\n        display: flex;\r\n        align-items: center;\r\n    }\r\n    .label{\r\n      padding: 0px .5rem 0px 1.25rem ;\r\n    }\r\n    .icon{\r\n      padding: 0px .25rem 0px 1.25rem ;\r\n    }\r\n    .icon:not(.hidden) + .label:not(.hidden){\r\n      padding-left: .75rem;\r\n    }\r\n    .hidden{\r\n      display: none;\r\n    }\r\n    .row{\r\n        width: 100%;\r\n        min-height: 3.125rem;\r\n        display: flex;\r\n        position: relative;\r\n    }\r\n    .input {\r\n      flex: 0%;\r\n      min-height: 100%;\r\n      position: relative;\r\n    }\r\n    .line{\r\n        width: calc(100% - 2rem);\r\n        height: .1rem;\r\n        position: absolute;\r\n        background: var(--input_line);\r\n        left: 50%;\r\n        bottom: 0px;\r\n        transform: translateX(-50%);\r\n        z-index: 2;\r\n    }\r\n    ::slotted(input){\r\n      width: 100%;\r\n      height: 100%;\r\n      background: transparent;\r\n      border: none;\r\n      font-family: unset;\r\n      font-size: 1rem;\r\n      padding: 0px 1rem;\r\n      box-sizing: border-box;\r\n      position: relative;\r\n      z-index: 2;\r\n  }\r\n`;\r\n\r\nexport const inputProps = {\r\n  name: String,\r\n  type: String,\r\n  value: null,\r\n  list: String,\r\n  pattern: String,\r\n  min: Number,\r\n  max: Number,\r\n  minLength: Number,\r\n  maxLength: Number,\r\n  placeholder: String,\r\n  required: Boolean,\r\n  checked: Boolean,\r\n  disabled: { type: Boolean, reflect: true },\r\n};\r\n\r\nfunction inputBasic({ type, ...props }) {\r\n  const [, setValue] = useProp(\"value\");\r\n  const refLabel = useRef();\r\n  const refIcon = useRef();\r\n  const refInput = useRef();\r\n  const slotLabel = useSlot(refLabel);\r\n  const slotIcon = useSlot(refIcon);\r\n\r\n  useRender(() => <input type={type} {...props} slot=\"input\" ref={refInput} />);\r\n  useEventLabel(() => refInput.current.click());\r\n\r\n  return (\r\n    <host\r\n      shadowDom\r\n      checkValidity={() => refInput.current.checkValidity()}\r\n      oninput={() => setValue(refInput.current.value)}\r\n    >\r\n      <style>{inputStyle}</style>\r\n      <div class=\"row\" onclick={() => refInput.current.focus()}>\r\n        <div class={`icon ${slotIcon.length ? \"\" : \"hidden\"}`}>\r\n          <slot ref={refIcon} name=\"icon\"></slot>\r\n        </div>\r\n        <div\r\n          class={`label ${\r\n            slotLabel.filter((tag) => tag.localName != \"datalist\").length\r\n              ? \"\"\r\n              : \"hidden\"\r\n          }`}\r\n        >\r\n          <slot ref={refLabel}></slot>\r\n        </div>\r\n        <div class=\"input\">\r\n          <slot name=\"input\"></slot>\r\n          <div class=\"line\"></div>\r\n        </div>\r\n      </div>\r\n    </host>\r\n  );\r\n}\r\n\r\ninputBasic.props = inputProps;\r\n\r\nexport const InputBasic = c(inputBasic);\r\n"],"names":[],"mappings":";;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;"}